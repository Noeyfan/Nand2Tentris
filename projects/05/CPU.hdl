// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
      // itype: 1 means A instruction, 0 means C instruction
      Nand (a=instruction[15], b=true, out=itype);
      Or (a=itype, b=instruction[5], out=aload);

      // A register
      Mux16 (a=aluout, b[15]=false, b[0..14]=instruction[0..14], sel=itype, out=addr);
      ARegister (in=addr, load=aload, out=aout);

      // D register
      DRegister (in=aluout, load=instruction[4], out=dout);

      // Pick A or M
      Mux16 (a=aout, b=inM, sel=instruction[12], out=aorm);

      // ALU
      ALU (x=dout,
           y=aorm,
           zx=instruction[11],
           nx=instruction[10],
           zy=instruction[9],
           ny=instruction[8],
           f= instruction[7],
           no=instruction[6],
           out=aluout,
           zr=aluzr,
           ng=alung
        );

      // writeM
      And (a=instruction[3], b=instruction[15], out=writeM);

      // PC
      Not (in=alung, out=alunotng);
      Not (in=aluzr, out=alunotzr);
      And (a=alunotng, b=alunotzr, out=aluge);
      Or (a=alung, b=aluzr, out=alule);
      Mux8Way (a=false, b=aluge, c=aluzr, d=alunotng, e=alung, f=alunotzr, g=alule, h=true, sel=instruction[0..2], out=pcsel);
      And (a=pcsel, b=instruction[15], out=pcload);
      Not (in=pcload, out=pcinc);
      PC (in=aout, load=pcload, inc=pcinc, reset=reset, out[0..14]=pc);

      // addressM
      And16 (a=aout, b=true, out[0..14]=addressM);

      // outM
      And16 (a=aluout, b=true, out=outM);
}
